[1mdiff --git a/DOCKER.md b/DOCKER.md[m
[1mnew file mode 100644[m
[1mindex 0000000..37d68e3[m
[1m--- /dev/null[m
[1m+++ b/DOCKER.md[m
[36m@@ -0,0 +1,234 @@[m
[32m+[m[32m# 🐳 Docker Setup for Number Guessing Game[m
[32m+[m
[32m+[m[32mThis document explains how to run the Number Guessing Game using Docker and Docker Compose.[m
[32m+[m
[32m+[m[32m## 📋 Prerequisites[m
[32m+[m
[32m+[m[32m- Docker Desktop installed and running[m
[32m+[m[32m- Docker Compose (usually comes with Docker Desktop)[m
[32m+[m[32m- Git (to clone the repository)[m
[32m+[m
[32m+[m[32m## 🚀 Quick Start[m
[32m+[m
[32m+[m[32m### 1. Build and Run with Docker Compose[m
[32m+[m
[32m+[m[32m```bash[m
[32m+[m[32m# Build and start all services[m
[32m+[m[32mdocker-compose up --build[m
[32m+[m
[32m+[m[32m# Run in background[m
[32m+[m[32mdocker-compose up -d --build[m
[32m+[m
[32m+[m[32m# View logs[m
[32m+[m[32mdocker-compose logs -f[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m### 2. Access the Application[m
[32m+[m
[32m+[m[32m- **Frontend**: http://localhost:3000[m
[32m+[m[32m- **Backend API**: http://localhost:3001[m
[32m+[m[32m- **Health Check**: http://localhost:3001/health[m
[32m+[m
[32m+[m[32m## 🏗️ Docker Architecture[m
[32m+[m
[32m+[m[32m```[m
[32m+[m[32m┌─────────────────┐    ┌─────────────────┐[m
[32m+[m[32m│   Frontend      │    │    Backend      │[m
[32m+[m[32m│   (Port 3000)   │◄──►│   (Port 3001)   │[m
[32m+[m[32m│                 │    │                 │[m
[32m+[m[32m└─────────────────┘    └─────────────────┘[m
[32m+[m[32m         │                       │[m
[32m+[m[32m         └───────────────────────┘[m
[32m+[m[32m                 │[m
[32m+[m[32m         ┌─────────────────┐[m
[32m+[m[32m         │  Docker Network │[m
[32m+[m[32m         │  (game-network) │[m
[32m+[m[32m         └─────────────────┘[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m## 📁 Docker Files Structure[m
[32m+[m
[32m+[m[32m```[m
[32m+[m[32mproject-root/[m
[32m+[m[32m├── docker-compose.yml          # Development setup[m
[32m+[m[32m├── docker-compose.prod.yml     # Production setup[m
[32m+[m[32m├── frontend/[m
[32m+[m[32m│   ├── Dockerfile             # Frontend container[m
[32m+[m[32m│   └── .dockerignore          # Exclude files[m
[32m+[m[32m└── backend/[m
[32m+[m[32m    ├── Dockerfile             # Backend container[m
[32m+[m[32m    └── .dockerignore          # Exclude files[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m## 🔧 Docker Commands[m
[32m+[m
[32m+[m[32m### Development[m
[32m+[m
[32m+[m[32m```bash[m
[32m+[m[32m# Start services[m
[32m+[m[32mdocker-compose up[m
[32m+[m
[32m+[m[32m# Start in background[m
[32m+[m[32mdocker-compose up -d[m
[32m+[m
[32m+[m[32m# View logs[m
[32m+[m[32mdocker-compose logs -f[m
[32m+[m
[32m+[m[32m# Stop services[m
[32m+[m[32mdocker-compose down[m
[32m+[m
[32m+[m[32m# Rebuild and start[m
[32m+[m[32mdocker-compose up --build[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m### Production[m
[32m+[m
[32m+[m[32m```bash[m
[32m+[m[32m# Use production compose file[m
[32m+[m[32mdocker-compose -f docker-compose.prod.yml up --build[m
[32m+[m
[32m+[m[32m# Start in background[m
[32m+[m[32mdocker-compose -f docker-compose.prod.yml up -d --build[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m### Individual Services[m
[32m+[m
[32m+[m[32m```bash[m
[32m+[m[32m# Start only backend[m
[32m+[m[32mdocker-compose up backend[m
[32m+[m
[32m+[m[32m# Start only frontend[m
[32m+[m[32mdocker-compose up frontend[m
[32m+[m
[32m+[m[32m# Rebuild specific service[m
[32m+[m[32mdocker-compose build frontend[m
[32m+[m[32mdocker-compose build backend[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m## 🌐 Port Configuration[m
[32m+[m
[32m+[m[32m| Service | Container Port | Host Port | Description |[m
[32m+[m[32m|---------|----------------|-----------|-------------|[m
[32m+[m[32m| Frontend | 3000 | 3000 | React application |[m
[32m+[m[32m| Backend | 3001 | 3001 | Node.js API server |[m
[32m+[m
[32m+[m[32m## 🔄 Environment Variables[m
[32m+[m
[32m+[m[32m### Frontend Container[m
[32m+[m[32m- `NODE_ENV=production`[m
[32m+[m[32m- `REACT_APP_SERVER_URL=http://localhost:3001`[m
[32m+[m
[32m+[m[32m### Backend Container[m
[32m+[m[32m- `NODE_ENV=production`[m
[32m+[m[32m- `PORT=3001`[m
[32m+[m[32m- `FRONTEND_URL=http://localhost:3000`[m
[32m+[m
[32m+[m[32m## 📊 Health Checks[m
[32m+[m
[32m+[m[32mThe backend service includes health checks:[m
[32m+[m
[32m+[m[32m```yaml[m
[32m+[m[32mhealthcheck:[m
[32m+[m[32m  test: ["CMD", "curl", "-f", "http://localhost:3001/health"][m
[32m+[m[32m  interval: 30s[m
[32m+[m[32m  timeout: 10s[m
[32m+[m[32m  retries: 3[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m## 🚨 Troubleshooting[m
[32m+[m
[32m+[m[32m### Common Issues[m
[32m+[m
[32m+[m[32m1. **Port Already in Use**[m
[32m+[m[32m   ```bash[m
[32m+[m[32m   # Check what's using the port[m
[32m+[m[32m   netstat -ano | findstr :3000[m
[32m+[m[32m   netstat -ano | findstr :3001[m
[32m+[m[41m   [m
[32m+[m[32m   # Kill the process or change ports in docker-compose.yml[m
[32m+[m[32m   ```[m
[32m+[m
[32m+[m[32m2. **Container Won't Start**[m
[32m+[m[32m   ```bash[m
[32m+[m[32m   # Check logs[m
[32m+[m[32m   docker-compose logs backend[m
[32m+[m[32m   docker-compose logs frontend[m
[32m+[m[41m   [m
[32m+[m[32m   # Rebuild containers[m
[32m+[m[32m   docker-compose down[m
[32m+[m[32m   docker-compose up --build[m
[32m+[m[32m   ```[m
[32m+[m
[32m+[m[32m3. **Network Issues**[m
[32m+[m[32m   ```bash[m
[32m+[m[32m   # Check network[m
[32m+[m[32m   docker network ls[m
[32m+[m[32m   docker network inspect game-network[m
[32m+[m[32m   ```[m
[32m+[m
[32m+[m[32m### Debug Commands[m
[32m+[m
[32m+[m[32m```bash[m
[32m+[m[32m# Enter running container[m
[32m+[m[32mdocker exec -it number-game-backend sh[m
[32m+[m[32mdocker exec -it number-game-frontend sh[m
[32m+[m
[32m+[m[32m# View container info[m
[32m+[m[32mdocker ps[m
[32m+[m[32mdocker inspect number-game-backend[m
[32m+[m
[32m+[m[32m# Check container logs[m
[32m+[m[32mdocker logs number-game-backend[m
[32m+[m[32mdocker logs number-game-frontend[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m## 🔒 Security Considerations[m
[32m+[m
[32m+[m[32m- Containers run as non-root users[m
[32m+[m[32m- Network isolation with custom bridge network[m
[32m+[m[32m- No sensitive data in container images[m
[32m+[m[32m- Health checks for service monitoring[m
[32m+[m
[32m+[m[32m## 📈 Performance Optimization[m
[32m+[m
[32m+[m[32m### Development[m
[32m+[m[32m- Volume mounts for hot reloading[m
[32m+[m[32m- Shared node_modules volumes[m
[32m+[m[32m- Fast rebuilds with cached layers[m
[32m+[m
[32m+[m[32m### Production[m
[32m+[m[32m- Multi-stage builds (can be added)[m
[32m+[m[32m- Optimized base images[m
[32m+[m[32m- Health checks and restart policies[m
[32m+[m
[32m+[m[32m## 🚀 Deployment[m
[32m+[m
[32m+[m[32m### Local Development[m
[32m+[m[32m```bash[m
[32m+[m[32mdocker-compose up --build[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m### Production[m
[32m+[m[32m```bash[m
[32m+[m[32mdocker-compose -f docker-compose.prod.yml up -d --build[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m### Scaling (if needed)[m
[32m+[m[32m```bash[m
[32m+[m[32m# Scale backend instances[m
[32m+[m[32mdocker-compose up --scale backend=3[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m## 📝 Notes[m
[32m+[m
[32m+[m[32m- Frontend depends on backend (health check)[m
[32m+[m[32m- Backend starts first, then frontend[m
[32m+[m[32m- Services restart automatically unless stopped manually[m
[32m+[m[32m- Network allows inter-service communication[m
[32m+[m[32m- Volumes persist data between container restarts[m
[32m+[m
[32m+[m[32m## 🔗 Related Documentation[m
[32m+[m
[32m+[m[32m- [Frontend README](./frontend/README.md)[m
[32m+[m[32m- [Backend README](./backend/README.md)[m
[32m+[m[32m- [Main README](./README.md)[m
[1mdiff --git a/backend/.dockerignore b/backend/.dockerignore[m
[1mnew file mode 100644[m
[1mindex 0000000..826d9c1[m
[1m--- /dev/null[m
[1m+++ b/backend/.dockerignore[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32mnode_modules[m
[32m+[m[32mnpm-debug.log[m
[32m+[m[32m.git[m
[32m+[m[32m.gitignore[m
[32m+[m[32mREADME.md[m
[32m+[m[32m.env[m
[32m+[m[32m.env.local[m
[32m+[m[32m.env.development.local[m
[32m+[m[32m.env.test.local[m
[32m+[m[32m.env.production.local[m
[32m+[m[32mconfig.env[m
[1mdiff --git a/backend/Dockerfile b/backend/Dockerfile[m
[1mnew file mode 100644[m
[1mindex 0000000..486899d[m
[1m--- /dev/null[m
[1m+++ b/backend/Dockerfile[m
[36m@@ -0,0 +1,20 @@[m
[32m+[m[32m# Backend Dockerfile[m
[32m+[m[32mFROM node:18-alpine[m
[32m+[m
[32m+[m[32m# Set working directory[m
[32m+[m[32mWORKDIR /app[m
[32m+[m
[32m+[m[32m# Copy package files[m
[32m+[m[32mCOPY package*.json ./[m
[32m+[m
[32m+[m[32m# Install dependencies[m
[32m+[m[32mRUN npm ci --only=production[m
[32m+[m
[32m+[m[32m# Copy source code[m
[32m+[m[32mCOPY . .[m
[32m+[m
[32m+[m[32m# Expose port[m
[32m+[m[32mEXPOSE 3001[m
[32m+[m
[32m+[m[32m# Start the server[m
[32m+[m[32mCMD ["npm", "start"][m
[1mdiff --git a/backend/Procfile b/backend/Procfile[m
[1mnew file mode 100644[m
[1mindex 0000000..489b270[m
[1m--- /dev/null[m
[1m+++ b/backend/Procfile[m
[36m@@ -0,0 +1 @@[m
[32m+[m[32mweb: node server.js[m
[1mdiff --git a/backend/README.md b/backend/README.md[m
[1mnew file mode 100644[m
[1mindex 0000000..be96455[m
[1m--- /dev/null[m
[1m+++ b/backend/README.md[m
[36m@@ -0,0 +1,161 @@[m
[32m+[m[32m# Number Guessing Game - Backend[m
[32m+[m
[32m+[m[32mNode.js/Express backend with Socket.IO for the multiplayer 4-digit number guessing game.[m
[32m+[m
[32m+[m[32m## Features[m
[32m+[m
[32m+[m[32m- **Express.js** server framework[m
[32m+[m[32m- **Socket.IO** for real-time communication[m
[32m+[m[32m- **CORS** configured for frontend connection[m
[32m+[m[32m- **RESTful API** endpoints[m
[32m+[m[32m- **In-memory game state** management[m
[32m+[m
[32m+[m[32m## Project Structure[m
[32m+[m
[32m+[m[32m```[m
[32m+[m[32mbackend/[m
[32m+[m[32m├── server.js           # Main server file[m
[32m+[m[32m├── package.json        # Dependencies and scripts[m
[32m+[m[32m├── Procfile           # Deployment configuration[m
[32m+[m[32m├── config.env         # Environment variables template[m
[32m+[m[32m└── README.md          # This file[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m## Environment Variables[m
[32m+[m
[32m+[m[32mCopy `config.env` to `.env` and update values:[m
[32m+[m
[32m+[m[32m```env[m
[32m+[m[32mPORT=3001[m
[32m+[m[32mFRONTEND_URL=http://localhost:3000[m
[32m+[m[32mNODE_ENV=development[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32mFor production:[m
[32m+[m[32m```env[m
[32m+[m[32mPORT=3001[m
[32m+[m[32mFRONTEND_URL=https://your-frontend-domain.netlify.app[m
[32m+[m[32mNODE_ENV=production[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m## API Endpoints[m
[32m+[m
[32m+[m[32m### REST Endpoints:[m
[32m+[m
[32m+[m[32m- **GET /health**[m
[32m+[m[32m  ```json[m
[32m+[m[32m  {[m
[32m+[m[32m    "status": "OK",[m
[32m+[m[32m    "message": "Number Guessing Game Backend is running",[m
[32m+[m[32m    "activeGames": 0,[m
[32m+[m[32m    "timestamp": "2024-01-01T00:00:00.000Z"[m
[32m+[m[32m  }[m
[32m+[m[32m  ```[m
[32m+[m
[32m+[m[32m- **GET /api/game-status**[m
[32m+[m[32m  ```json[m
[32m+[m[32m  {[m
[32m+[m[32m    "totalGames": 2,[m
[32m+[m[32m    "activeGames": ["123ABC", "456DEF"],[m
[32m+[m[32m    "serverTime": "2024-01-01T00:00:00.000Z"[m
[32m+[m[32m  }[m
[32m+[m[32m  ```[m
[32m+[m
[32m+[m[32m### Socket.IO Events:[m
[32m+[m
[32m+[m[32m#### Client → Server:[m
[32m+[m[32m- **join-game** `{ gameId, playerName }`[m
[32m+[m[32m- **set-secret** `{ secretNumber }`[m
[32m+[m[32m- **make-guess** `{ targetPlayerId, guess }`[m
[32m+[m[32m- **restart-game** `{}`[m
[32m+[m
[32m+[m[32m#### Server → Client:[m
[32m+[m[32m- **joined-game** `{ success, playerId?, gameState?, reason? }`[m
[32m+[m[32m- **game-updated** `gameState`[m
[32m+[m[32m- **guess-made** `guessData`[m
[32m+[m[32m- **error** `{ message }`[m
[32m+[m
[32m+[m[32m## Game Logic[m
[32m+[m
[32m+[m[32m### Room ID Format:[m
[32m+[m[32m- 3 digits + 3 letters (e.g., "123ABC")[m
[32m+[m
[32m+[m[32m### Secret Numbers:[m
[32m+[m[32m- 4-digit numbers (1000-9999)[m
[32m+[m
[32m+[m[32m### Guessing System:[m
[32m+[m[32m- Turn-based gameplay[m
[32m+[m[32m- 20 guesses per player[m
[32m+[m[32m- Digit-by-digit feedback:[m
[32m+[m[32m  - **Correct**: Digit matches position[m
[32m+[m[32m  - **Higher**: Target digit is higher[m
[32m+[m[32m  - **Lower**: Target digit is lower[m
[32m+[m
[32m+[m[32m### Win Conditions:[m
[32m+[m[32m- **Win**: All 4 digits guessed correctly[m
[32m+[m[32m- **Draw**: All players run out of guesses[m
[32m+[m
[32m+[m[32m## Development Setup[m
[32m+[m
[32m+[m[32m1. **Install dependencies:**[m
[32m+[m[32m   ```bash[m
[32m+[m[32m   cd backend[m
[32m+[m[32m   npm install[m
[32m+[m[32m   ```[m
[32m+[m
[32m+[m[32m2. **Start development server:**[m
[32m+[m[32m   ```bash[m
[32m+[m[32m   npm run dev  # Uses nodemon for auto-restart[m
[32m+[m[32m   # OR[m
[32m+[m[32m   npm start    # Standard node start[m
[32m+[m[32m   ```[m
[32m+[m
[32m+[m[32m## Deployment[m
[32m+[m
[32m+[m[32m### Railway Deployment:[m
[32m+[m[32m1. Connect your GitHub repository to Railway[m
[32m+[m[32m2. Set environment variables in Railway dashboard[m
[32m+[m[32m3. Deploy automatically on push[m
[32m+[m
[32m+[m[32m### Render Deployment:[m
[32m+[m[32m1. Create new Web Service on Render[m
[32m+[m[32m2. Connect GitHub repository[m
[32m+[m[32m3. Set build command: `npm install`[m
[32m+[m[32m4. Set start command: `npm start`[m
[32m+[m[32m5. Set environment variables[m
[32m+[m
[32m+[m[32m### Heroku Deployment:[m
[32m+[m[32m1. Install Heroku CLI[m
[32m+[m[32m2. Create Heroku app[m
[32m+[m[32m3. Set environment variables[m
[32m+[m[32m4. Deploy using Git[m
[32m+[m
[32m+[m[32m## CORS Configuration[m
[32m+[m
[32m+[m[32mThe server is configured to accept connections from:[m
[32m+[m[32m- `http://localhost:3000` (development)[m
[32m+[m[32m- Your deployed frontend URL (production)[m
[32m+[m
[32m+[m[32mUpdate `FRONTEND_URL` environment variable for your deployed frontend.[m
[32m+[m
[32m+[m[32m## Game State Management[m
[32m+[m
[32m+[m[32mGames are stored in memory using a Map:[m
[32m+[m[32m```javascript[m
[32m+[m[32mconst games = new Map(); // gameId -> gameState[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32mGame state includes:[m
[32m+[m[32m- Players list with stats[m
[32m+[m[32m- Current turn player[m
[32m+[m[32m- Game status (started/ended)[m
[32m+[m[32m- Guess history[m
[32m+[m[32m- Secret numbers[m
[32m+[m[32m- Win/draw conditions[m
[32m+[m
[32m+[m[32m## Security Notes[m
[32m+[m
[32m+[m[32m- Input validation for all game data[m
[32m+[m[32m- CORS properly configured[m
[32m+[m[32m- No sensitive data exposed to clients[m
[32m+[m[32m- Rate limiting can be added for production[m
[1mdiff --git a/backend/config.env b/backend/config.env[m
[1mnew file mode 100644[m
[1mindex 0000000..b8a60d1[m
[1m--- /dev/null[m
[1m+++ b/backend/config.env[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m# Backend Environment Variables Template[m
[32m+[m[32m# Copy this file to .env and update the values for your deployment[m
[32m+[m
[32m+[m[32m# Port for the server to run on[m
[32m+[m[32mPORT=3001[m
[32m+[m
[32m+[m[32m# Frontend URL for CORS (set this to your deployed frontend URL)[m
[32m+[m[32mFRONTEND_URL=http://localhost:3000[m
[32m+[m
[32m+[m[32m# Node Environment[m
[32m+[m[32mNODE_ENV=development[m
[1mdiff --git a/backend/package-lock.json b/backend/package-lock.json[m
[1mnew file mode 100644[m
[1mindex 0000000..53a7d54[m
[1m--- /dev/null[m
[1m+++ b/backend/package-lock.json[m
[36m@@ -0,0 +1,1466 @@[m
[32m+[m[32m{[m
[32m+[m[32m  "name": "number-guessing-game-backend",[m
[32m+[m[32m  "version": "0.1.0",[m
[32m+[m[32m  "lockfileVersion": 3,[m
[32m+[m[32m  "requires": true,[m
[32m+[m[32m  "packages": {[m
[32m+[m[32m    "": {[m
[32m+[m[32m      "name": "number-guessing-game-backend",[m
[32m+[m[32m      "version": "0.1.0",[m
[32m+[m[32m      "dependencies": {[m
[32m+[m[32m        "cors": "^2.8.5",[m
[32m+[m[32m        "express": "^4.18.2",[m
[32m+[m[32m        "socket.io": "^4.7.0"[m
[32m+[m[32m      },[m
[32m+[m[32m      "devDependencies": {[m
[32m+[m[32m        "nodemon": "^3.0.0"[m
[32m+[m[32m      },[m
[32m+[m[32m      "engines": {[m
[32m+[m[32m        "node": ">=16.0.0"[m
[32m+[m[32m      }[m
[32m+[m[32m    },[m
[32m+[m[32m    "node_modules/@socket.io/component-emitter": {[m
[32m+[m[32m      "version": "3.1.2",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/@socket.io/component-emitter/-/component-emitter-3.1.2.tgz",[m
[32m+[m[32m      "integrity": "sha512-9BCxFwvbGg/RsZK9tjXd8s4UcwR0MWeFQ1XEKIQVVvAGJyINdrqKMcTRyLoK8Rse1GjzLV9cwjWV1olXRWEXVA==",[m
[32m+[m[32m      "license": "MIT"[m
[32m+[m[32m    },[m
[32m+[m[32m    "node_modules/@types/cors": {[m
[32m+[m[32m      "version": "2.8.19",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/@types/cors/-/cors-2.8.19.tgz",[m
[32m+[m[32m      "integrity": "sha512-mFNylyeyqN93lfe/9CSxOGREz8cpzAhH+E93xJ4xWQf62V8sQ/24reV2nyzUWM6H6Xji+GGHpkbLe7pVoUEskg==",[m
[32m+[m[32m      "license": "MIT",[m
[32m+[m[32m      "dependencies": {[m
[32m+[m[32m        "@types/node": "*"[m
[32m+[m[32m      }[m
[32m+[m[32m    },[m
[32m+[m[32m    "node_modules/@types/node": {[m
[32m+[m[32m      "version": "24.3.0",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/@types/node/-/node-24.3.0.tgz",[m
[32m+[m[32m      "integrity": "sha512-aPTXCrfwnDLj4VvXrm+UUCQjNEvJgNA8s5F1cvwQU+3KNltTOkBm1j30uNLyqqPNe7gE3KFzImYoZEfLhp4Yow==",[m
[32m+[m[32m      "license": "MIT",[m
[32m+[m[32m      "dependencies": {[m
[32m+[m[32m        "undici-types": "~7.10.0"[m
[32m+[m[32m      }[m
[32m+[m[32m    },[m
[32m+[m[32m    "node_modules/accepts": {[m
[32m+[m[32m      "version": "1.3.8",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",[m
[32m+[m[32m      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",[m
[32m+[m[32m      "license": "MIT",[m
[32m+[m[32m      "dependencies": {[m
[32m+[m[32m        "mime-types": "~2.1.34",[m
[32m+[m[32m        "negotiator": "0.6.3"[m
[32m+[m[32m      },[m
[32m+[m[32m      "engines": {[m
[32m+[m[32m        "node": ">= 0.6"[m
[32m+[m[32m      }[m
[32m+[m[32m    },[m
[32m+[m[32m    "node_modules/anymatch": {[m
[32m+[m[32m      "version": "3.1.3",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/anymatch/-/anymatc